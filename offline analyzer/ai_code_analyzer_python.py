#!/usr/bin/env python3
"""
ai_code_analyzer.py
--------------------
A terminal-based tool to analyze Python code and estimate AI involvement.

Heuristic-based detection includes:
- AI tool signatures in comments (e.g., "Generated by", "AI", "ChatGPT").
- Uniform style patterns (consistent indentation, naming styles).
- Complexity analysis (cyclomatic complexity, function length).
- Standardized docstring/comment patterns.
- Repetitiveness and structural uniformity.

Author: Sakthi's AI Analyzer (example)
"""

import ast
import re
import statistics

def get_user_code():
    """Prompt user for multiline Python code until 'END' is entered."""
    print("Enter Python code (type 'END' on a new line to finish):")
    lines = []
    while True:
        try:
            line = input()
            if line.strip().upper() == "END":
                break
            lines.append(line)
        except EOFError:
            break
    return "\n".join(lines)


def analyze_code(code: str):
    """
    Analyze code heuristically and return AI involvement estimate.
    Returns:
        percentage (int), confidence (int), reasons (list of str)
    """
    reasons = []
    ai_score = 0
    confidence = 50  # base confidence

    # 1. Check for AI-generated comments or metadata
    if re.search(r"(generated by|chatgpt|copilot|ai)", code, re.I):
        ai_score += 40
        confidence += 20
        reasons.append("Presence of AI-generated comment or metadata detected.")

    # 2. Check for repetitive code structures
    lines = [l.strip() for l in code.splitlines() if l.strip()]
    if len(lines) > 5:
        unique_lines = set(lines)
        repetition_ratio = 1 - (len(unique_lines) / len(lines))
        if repetition_ratio > 0.3:
            ai_score += 20
            confidence += 10
            reasons.append("High repetition ratio in code structure.")

    # 3. Check naming conventions (uniformity = AI-like)
    identifiers = re.findall(r"\b[a-zA-Z_][a-zA-Z0-9_]*\b", code)
    if identifiers:
        avg_len = statistics.mean(len(i) for i in identifiers)
        if avg_len < 4:  # very short names (a, b, c)
            ai_score += 10
            reasons.append("Short, uniform variable names detected.")
        elif avg_len > 10:  # very long descriptive names
            ai_score += 10
            reasons.append("Overly uniform descriptive names detected.")

    # 4. Syntax validation and complexity analysis
    try:
        tree = ast.parse(code)
        func_defs = [n for n in ast.walk(tree) if isinstance(n, ast.FunctionDef)]

        if func_defs:
            func_lengths = [len(f.body) for f in func_defs]
            avg_func_len = statistics.mean(func_lengths)
            if avg_func_len < 3:
                ai_score += 10
                reasons.append("Very short, minimalistic functions suggest AI boilerplate.")
            elif avg_func_len > 50:
                ai_score += 10
                reasons.append("Overly long functions with uniform blocks suggest AI generation.")

        # Cyclomatic complexity approximation (count branches)
        branch_nodes = (ast.If, ast.For, ast.While, ast.Try, ast.With)
        branch_count = sum(isinstance(n, branch_nodes) for n in ast.walk(tree))
        if branch_count < 2 and func_defs:
            ai_score += 10
            reasons.append("Low branch complexity compared to number of functions.")

    except SyntaxError:
        reasons.append("Invalid Python syntax detected. Reduced confidence.")
        confidence -= 20

    # Normalize AI score (0-100)
    ai_score = min(100, ai_score)
    confidence = max(10, min(100, confidence))

    # Explanation
    if not reasons:
        reasons.append("No strong AI indicators found. Likely human-written.")

    return ai_score, confidence, reasons


def main():
    print("=== AI Code Analyzer ===")
    while True:
        code = get_user_code()
        if not code.strip():
            print("No code entered.")
        else:
            print("Analyzing code...")
            ai_percentage, confidence, reasons = analyze_code(code)
            print(f"\nEstimated AI Involvement: {ai_percentage}%")
            print(f"Confidence Score: {confidence}%")
            print("Reasoning:")
            for r in reasons:
                print(f"- {r}")

        again = input("\nAnalyze another code? (y/n): ").strip().lower()
        if again != "y":
            print("Exiting AI Code Analyzer. Goodbye!")
            break


if __name__ == "__main__":
    main()
