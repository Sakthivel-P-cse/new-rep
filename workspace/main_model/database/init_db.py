import os
import sqlite3

DB_PATH = os.path.join(os.path.dirname(__file__), "submissions.db")


def main() -> None:
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS submissions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                language TEXT,
                code TEXT
            );
            """
        )
        # Insert some mock historical submissions if table is empty
        count = conn.execute("SELECT COUNT(*) FROM submissions").fetchone()[0]
        if count == 0:
            samples = [
                ("Python", """
# Simple Python factorial
# Generated by a student

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)

print(factorial(5))
""".strip()),
                ("Java", """
// Java Hello World
public class Hello {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }
}
""".strip()),
                ("JavaScript", """
// JS sum function
function sum(a, b) { return a + b; }
console.log(sum(2, 3));
""".strip()),
                ("C++", """
#include <iostream>
using namespace std;
int main(){ cout << "Hello" << endl; return 0; }
""".strip()),
            ]
            conn.executemany("INSERT INTO submissions(language, code) VALUES(?, ?)", samples)
            conn.commit()
            print(f"Initialized DB at {DB_PATH} with {len(samples)} sample rows.")
        else:
            print(f"DB already initialized at {DB_PATH} with {count} rows.")
    finally:
        conn.close()


if __name__ == "__main__":
    main()

