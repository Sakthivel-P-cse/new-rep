import re
import ast
from sklearn.ensemble import RandomForestClassifier
import numpy as np

# Dummy trained classifier for demo (replace with real one)
def extract_features(code: str):
    # Statistical features
    lines = code.split('\n')
    line_count = len(lines)
    comment_count = sum(1 for l in lines if l.strip().startswith('#'))
    function_count = len(re.findall(r'def ', code))
    import_count = len(re.findall(r'import ', code))
    avg_line_len = np.mean([len(l) for l in lines]) if lines else 0
    ai_patterns = sum(1 for l in lines if 'Generated by' in l or 'AI' in l)
    try:
        tree = ast.parse(code)
        ast_nodes = len(list(ast.walk(tree)))
    except Exception:
        ast_nodes = 0
    # Features vector
    return np.array([
        line_count,
        comment_count,
        function_count,
        import_count,
        avg_line_len,
        ai_patterns,
        ast_nodes
    ]).reshape(1, -1)

def analyze_code(code: str) -> float:
    # Placeholder: simulate classifier
    features = extract_features(code)
    # "RandomForest" style logic, replace with real model
    ai_score = 0
    if features[0,1] > 0 and features[0,2] > 1:  # comments and functions
        ai_score += 20
    if features[0,5] > 0:  # AI pattern
        ai_score += 50
    if features[0,3] > 2:  # imports
        ai_score += 15
    ai_score += min(features[0,6] / 10, 15)
    return min(ai_score, 100)
