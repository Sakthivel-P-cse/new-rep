#!/usr/bin/env python3
import argparse
import sqlite3
import os


def analyze_cpp_content(code: str):
    # --- Heuristics for AI involvement in C++ code ---
    score = 0
    reasons = []

    # Rule 1: Check for AI-related comments
    if "Generated by" in code or "AI" in code or "ChatGPT" in code:
        score += 40
        reasons.append("Detected 'Generated by' or AI-related comment.")

    # Rule 2: Check for neat indentation (AI tends to use spaces, not tabs)
    if "\t" not in code and "    " in code:
        score += 15
        reasons.append("Consistent indentation suggests automated formatting.")

    # Rule 3: Detect advanced C++ features
    advanced_features = [
        "template<", "class ", "typename", "std::", "namespace", "new ",
        "delete", "->", "::", "friend", "virtual", "#define"
    ]
    if any(feature in code for feature in advanced_features):
        score += 10
        reasons.append("Advanced C++ feature detected (could be AI or expert human).")

    # Rule 4: Very short code snippet
    if len(code) < 50:
        score += 10
        reasons.append("Short code snippet with low complexity.")

    # Rule 5: Full structured template
    if "int main(" in code and "return 0;" in code:
        score += 20
        reasons.append("Complete program structure detected (AI often outputs full templates).")

    # Clamp score between 0 and 100
    if score > 100:
        score = 100

    # Confidence based on number of rules triggered
    confidence = 50 + len(reasons) * 7
    if confidence > 95:
        confidence = 95

    return score, confidence, reasons


def fetch_codes_from_db(db_path: str):
    if not os.path.exists(db_path):
        raise FileNotFoundError(f"Database not found at: {db_path}")
    conn = sqlite3.connect(db_path)
    try:
        cur = conn.cursor()
        cur.execute("SELECT id, filename, content FROM codes ORDER BY id ASC")
        for row in cur.fetchall():
            yield row
    finally:
        conn.close()


def main():
    parser = argparse.ArgumentParser(description="AI Code Analyzer for C++ (SQLite-driven)")
    parser.add_argument("--db", dest="db_path", default="./codes.db", help="Path to SQLite database containing table 'codes'")
    args = parser.parse_args()

    print("=== AI Code Analyzer (C++) - DB ===")
    any_row = False
    for code_id, filename, content in fetch_codes_from_db(args.db_path):
        any_row = True
        print(f"\n--- Analyzing: id={code_id}, file='{filename}' ---")
        code = content or ""
        if not code.strip():
            print("No code entered.")
            continue
        print("\nAnalyzing code...\n")
        score, confidence, reasons = analyze_cpp_content(code)
        print(f"Estimated AI Involvement: {score}%")
        print("Reasoning:")
        for reason in reasons:
            print(" -", reason)
        print(f"Confidence Score: {confidence}%")

    if not any_row:
        print("No rows found in table 'codes'.")


if __name__ == "__main__":
    main()

