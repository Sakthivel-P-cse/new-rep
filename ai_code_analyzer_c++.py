#!/usr/bin/env python3

def analyze_cpp_code():
    print("Enter your C++ code (end with a line containing only END):")
    lines = []
    while True:
        line = input()
        if line.strip() == "END":
            break
        lines.append(line)

    code = "\n".join(lines)

    # --- Heuristics for AI involvement in C++ code ---
    score = 0
    reasons = []

    # Rule 1: Check for AI-related comments
    if "Generated by" in code or "AI" in code or "ChatGPT" in code:
        score += 40
        reasons.append("Detected 'Generated by' or AI-related comment.")

    # Rule 2: Check for neat indentation (AI tends to use spaces, not tabs)
    if "\t" not in code and "    " in code:
        score += 15
        reasons.append("Consistent indentation suggests automated formatting.")

    # Rule 3: Detect advanced C++ features
    advanced_features = [
        "template<", "class ", "typename", "std::", "namespace", "new ",
        "delete", "->", "::", "friend", "virtual", "#define"
    ]
    if any(feature in code for feature in advanced_features):
        score += 10
        reasons.append("Advanced C++ feature detected (could be AI or expert human).")

    # Rule 4: Very short code snippet
    if len(code) < 50:
        score += 10
        reasons.append("Short code snippet with low complexity.")

    # Rule 5: Full structured template
    if "int main(" in code and "return 0;" in code:
        score += 20
        reasons.append("Complete program structure detected (AI often outputs full templates).")

    # Clamp score between 0 and 100
    if score > 100:
        score = 100

    # Confidence based on number of rules triggered
    confidence = 50 + len(reasons) * 7
    if confidence > 95:
        confidence = 95

    # Final output
    print("\nAnalyzing code...\n")
    print(f"Estimated AI Involvement: {score}%")
    print("Reasoning:")
    for reason in reasons:
        print(" -", reason)
    print(f"Confidence Score: {confidence}%")

if __name__ == "__main__":
    analyze_cpp_code()
